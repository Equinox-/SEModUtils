<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #> 
<#@ assembly name="EnvDTE80" #> 
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ output extension=".cs" #>
<#
    var dte = (this.Host as IServiceProvider).GetService(typeof(DTE)) as DTE;
    var project = dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject;

    var namespaceQueue = new Queue<CodeNamespace>();
    foreach (CodeElement e in project.CodeModel.CodeElements)
        if (e.Kind == vsCMElement.vsCMElementNamespace && e.FullName.StartsWith("Equinox"))
            namespaceQueue.Enqueue((CodeNamespace) e);
    
    var typeQueue = new Queue<CodeElement>();
    while (namespaceQueue.Count > 0) {
        CodeNamespace vrm = namespaceQueue.Dequeue();
        foreach (CodeElement c in vrm.Members)
            if (c.Kind == vsCMElement.vsCMElementNamespace)
                namespaceQueue.Enqueue((CodeNamespace) c);
            else
                typeQueue.Enqueue(c);
    }

    var baseComponentType = "Equinox.Utils.Session.ModSessionComponent";
    var validTypes = new HashSet<string>();
    while (typeQueue.Count > 0) {
        var type = typeQueue.Dequeue();
        if (type.Kind == vsCMElement.vsCMElementClass) {
            var ctype = (CodeClass) type;
            foreach (CodeElement m in ctype.Members) {
                typeQueue.Enqueue(m);
            }
            if (ctype.IsAbstract) continue;
            var valid = false;
            var bases = new Queue<CodeType>();
            bases.Enqueue((CodeType) ctype);
            while (bases.Count > 0) {
                var test = bases.Dequeue();
                if (test.FullName.Equals(baseComponentType)) {
                    valid = true;
                    break;
                }
                foreach (CodeElement k in test.Bases) {
                    if (k.IsCodeType) {
                        bases.Enqueue((CodeType)k);
                    }
                }
            }
            if (valid)
                validTypes.Add(type.FullName);
        }
    }
#>

using System.Xml.Serialization;
using System.Collections.Generic;
namespace Equinox.Utils.Session
{
    public class ModSessionComponentRegistryGen
    {
        public static void Register() {
<#
    foreach (var type in validTypes) {
        var sepr= type.LastIndexOf('.');
        var cleanType = type.Substring(sepr + 1);
        if (cleanType.EndsWith("Module")) cleanType = cleanType.Substring(0, cleanType.Length - 6);
        if (cleanType.EndsWith("Component")) cleanType = cleanType.Substring(0, cleanType.Length - 9);
        string obtype = "Ob_" + cleanType;
        if (sepr > 0)
            obtype = type.Substring(0, sepr + 1) + obtype;
        WriteLine($"            ModSessionComponentRegistry.Register<{type}, {obtype}>();");
    }
#>
        }
    }

    public partial class Ob_SessionManager
    {
<#
    foreach (var type in validTypes) {
        var sepr= type.LastIndexOf('.');
        var cleanType = type.Substring(sepr + 1);
        if (cleanType.EndsWith("Module")) cleanType = cleanType.Substring(0, cleanType.Length - 6);
        if (cleanType.EndsWith("Component")) cleanType = cleanType.Substring(0, cleanType.Length - 9);
        string obtype = "Ob_" + cleanType;
        if (sepr > 0)
            obtype = type.Substring(0, sepr + 1) + obtype;
        WriteLine($"        [XmlElement(\"{cleanType}\", typeof({obtype}))]");
    }
#>
        public List<Ob_ModSessionComponent> SessionComponents = new List<Ob_ModSessionComponent>();
    }
}